(()=>{"use strict";const e=function(){function e(){}return e.storeEnvVariables=function(t){var n=JSON.stringify(t);localStorage.setItem(e.KEY,n)},e.getEnvVariables=function(){var t=localStorage.getItem(e.KEY);return t?JSON.parse(t):null},e.storeAccessToken=function(t){localStorage.setItem(e.ACCESS_TOKEN,t)},e.getAccessToken=function(){var t=localStorage.getItem(e.ACCESS_TOKEN);if(void 0===t)throw new Error("No access token found");return t},e.KEY="AUTO_DIRECTWEB",e.ACCESS_TOKEN="LOGINID_ACCESS_TOKEN",e}(),t=function(){var e=this;this.uuidListElm=document.querySelector(".uuids"),this.list={},this.createElement=function(e,t){void 0===t&&(t=[]);var n=document.createElement(e);return t.forEach((function(e){return n.classList.add(e)})),n},this.add=function(t){if(!e.list[t]){var n=e.createElement("div",["uuid"]);n.textContent=t,e.uuidListElm.appendChild(n),e.list[t]=n}},this.remove=function(t){e.list[t]&&(e.list[t].remove(),delete e.list[t])},this.clear=function(){Object.keys(e.list).forEach((function(t){return e.remove(t)}))}};var n="Please check your email to verify your account",r=class extends Error{_errorCategory;_errorCode;_errorMessage;constructor(e,t,n){super(`[${e}:${t}] - ${n}`),this.name="LoginSDK-Error",this._errorCategory=e,this._errorCode=t,this._errorMessage=n}getErrorCategory(){return this._errorCategory}getErrorCode(){return this._errorCode}getErrorMessage(){return this._errorMessage}},s=class{_baseUrl;_defaultHeaders;constructor(e){this._baseUrl=e,this._defaultHeaders=[["Content-Type","application/json"],["Accept","application/json"],["X-SDK-Version","0.4.3"]]}async post(e,t,n){return this.sendRequest("POST",e,t,n)}async put(e,t,n){return this.sendRequest("PUT",e,t,n)}async delete(e,t){return this.sendRequest("DELETE",e,void 0,t)}async ws(e,t){let n=0,r=3;void 0!==t&&(r=t);let s=()=>{let t=this._baseUrl.replace(/^http:\/\//i,"ws://");return t=t.replace(/^https:\/\//i,"wss://"),t+=e,new WebSocket(t)};return new Promise(((e,t)=>{let a=()=>{let i=s();i.addEventListener("open",(()=>{console.log("WebSocket connection opened"),n=0})),i.addEventListener("message",(t=>{let n=JSON.parse(t.data);e(n),i.close()})),i.addEventListener("close",(()=>{console.log("WebSocket connection closed"),n<r?(console.log(`Retrying (${n+1}/${r})...`),n++,a()):t(new Error("WebSocket connection closed without receiving messages"))})),i.addEventListener("error",(e=>{console.error("WebSocket error:",e),t(e)}))};a()}))}async sendRequest(e,t,n,s){let a=s?[...s,...this._defaultHeaders]:this._defaultHeaders,i=await fetch(this._baseUrl+t,{headers:a,method:e,body:n});if(204===i.status)return null;let o=await i.json();if(i.ok)return o;let{error_category:c,error_code:l,error_message:u}=o;throw new r(c,l,u)}},a=e=>{let t="",n=new Uint8Array(e);for(let e=0;e<n.byteLength;e++)t+=String.fromCharCode(n[e]);let r=(e=>{if(!e)return e;let t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n=[],r=0;for(;r<e.length;){let s=e.charCodeAt(r++)<<16|e.charCodeAt(r++)<<8|e.charCodeAt(r++);n.push(t[s>>18&63]+t[s>>12&63]+t[s>>6&63]+t[63&s])}let s=n.join(""),a=e.length%3;return a?s.slice(0,a-3)+"===".slice(a||3):s})(t);return(e=>e.replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""))(r)},i=e=>{let t=(e=>{let t={},n=String.fromCharCode;for(let e=0;e<64;e++)t["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e)]=e;let r=0,s=0,a="";for(let i of e){let e=t[i];if(void 0!==e)for(r=(r<<6)+e,s+=6;s>=8;)a+=n(r>>(s-=8)&255)}return a})(e=e.replace(/-/g,"+").replace(/_/g,"/")),n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=t.charCodeAt(e);return n.buffer};async function o(){try{return!(!window.PublicKeyCredential||!window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable)&&window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()}catch{return!1}}var c=async e=>{let t;if(void 0!==e.excludeCredentials){t=[];for(let n of e.excludeCredentials){let e={id:i(n.id),transports:n.transports,type:n.type};t.push(e)}}let n={publicKey:{attestation:e.attestation,authenticatorSelection:{...e.authenticatorSelection},challenge:i(e.challenge),excludeCredentials:t,extensions:e.extensions,pubKeyCredParams:e.pubKeyCredParams,rp:e.rp,timeout:e.timeout,user:{...e.user,id:i(e.user.id)}}},s=await navigator.credentials.create(n);if(null===s)throw new r("creation_failed","credential_creation_error","Failed to create the passkey credential.");if("public-key"!==s.type)throw new r("invalid_type","invalid_credential_type","The created credential has an invalid type.");return s},l=async(e,t,n)=>{let r=JSON.stringify({app_id:e.getAppId(),mfa_id:t,username:n}),s=await e.getHttpClient().post("/frontend-api/sessions/mfa/begin",r);if(s)return s;throw new Error("MFA begin response null")},u=async(e,t)=>{let n=JSON.stringify({session_id:t}),r=await e.getHttpClient().post("/frontend-api/sessions/mfa/complete",n);if(r)return r;throw new Error("MFA complete response null")},d=class{_config;constructor(e){this._config=e}async signupWithPasskey(e,t){let n;t&&(n=t.credname);let r=await l(this._config),s=await(async(e,t,n)=>{let r=JSON.stringify({session_id:t,username:n});return await e.getHttpClient().post("/frontend-api/sessions/mfa/register/fido2/init",r)})(this._config,r.session_id,e),i=await c(s),o=await(async(e,t,n,r,s,i)=>{let o=s.response,c=[];typeof o.getTransports<"u"&&(c=o.getTransports());let l=JSON.stringify({session_id:t,username:n,cred_name:i,attestation_response:{id:a(s.rawId),challenge:r.challenge,type:"public-key",response:{attestationObject:a(o.attestationObject),clientDataJSON:a(o.clientDataJSON),transports:c}}});return await e.getHttpClient().post("/frontend-api/sessions/mfa/register/fido2/complete",l)})(this._config,r.session_id,e,s,i,n),d=await u(this._config,r.session_id);return{user:{user_uuid:o.user.user_uuid,username:o.user.username,created_at:o.user.created_at,last_login:o.user.last_login,is_active:o.user.is_active},auth_data:{token:d.access_token,expires_in:d.expires_in}}}async signinWithPasskey(e){let t=await l(this._config),n=await(async(e,t,n)=>{let r=JSON.stringify({session_id:t,...n&&{username:n}});return await e.getHttpClient().post("/frontend-api/sessions/mfa/authenticate/fido2/init",r)})(this._config,t.session_id,e||null),s=await(async e=>{let t;if(void 0!==e.allowCredentials){t=[];for(let n of e.allowCredentials){let e={id:i(n.id),transports:n.transports,type:n.type};t.push(e)}}let n={publicKey:{allowCredentials:t,challenge:i(e.challenge),extensions:e.extensions,rpId:e.rpId,timeout:e.timeout,userVerification:e.userVerification}},s=await navigator.credentials.get(n);if(null===s)throw new r("request_failed","credential_request_error","Failed to create the passkey credential.");if("public-key"!==s.type)throw new r("invalid_type","invalid_credential_type","The requested credential has an invalid type.");return s})(n),o=await(async(e,t,n,r,s)=>{let i=s.response,o=JSON.stringify({session_id:t,...n&&{username:n},assertion_response:{id:a(s.rawId),challenge:r.challenge,type:"public-key",response:{authenticatorData:a(i.authenticatorData),clientDataJSON:a(i.clientDataJSON),signature:a(i.signature),...i.userHandle&&{userHandle:a(i.userHandle)}}}});return await e.getHttpClient().post("/frontend-api/sessions/mfa/authenticate/fido2/complete",o)})(this._config,t.session_id,e||null,n,s),c=await u(this._config,t.session_id);return{user:{user_uuid:o.user.user_uuid,username:o.user.username,created_at:o.user.created_at,last_login:o.user.last_login,is_active:o.user.is_active},auth_data:{token:c.access_token,expires_in:c.expires_in}}}},f=async(e,t)=>{let n=[["Authorization",`Bearer ${t}`]];return await e.getHttpClient().post("/frontend-api/sessions/users/credentials",void 0,n)},p=async(e,t,n,r,s)=>{let a=`/frontend-api/sessions/users/credentials/${n}/${r}/name`,i=[["Authorization",`Bearer ${t}`]];return await e.getHttpClient().put(a,JSON.stringify(s),i)},g=async(e,t,n,r)=>await p(e,t,"fido2",n,r),h=async(e,t,n,r)=>await p(e,t,"recovery",n,r),v=async(e,t,n)=>{let r=`/frontend-api/sessions/users/credentials/fido2/${n}/lock`,s=[["Authorization",`Bearer ${t}`]];return await e.getHttpClient().put(r,"true",s)},y=async(e,t,n)=>{let r=`/frontend-api/sessions/users/credentials/fido2/${n}/lock`,s=[["Authorization",`Bearer ${t}`]];return await e.getHttpClient().put(r,"false",s)},_=async(e,t,n,r)=>{let s=`/frontend-api/sessions/users/credentials/${n}/${r}`,a=[["Authorization",`Bearer ${t}`]];return await e.getHttpClient().delete(s,a)},w=async(e,t,n)=>await _(e,t,"fido2",n),m=async(e,t,n)=>await _(e,t,"recovery",n),b=async(e,t)=>{let n=[["Authorization",`Bearer ${t}`]];return await e.getHttpClient().post("/frontend-api/sessions/users/credentials/recovery",void 0,n)},k=async(e,t)=>{let n=`/frontend-api/sessions/mfa/${t}/credentials/email/wait`;return await e.getHttpClient().ws(n,5)},E=class{_config;constructor(e){this._config=e}async addPasskeyWithToken(e,t,n){let r;n&&(r=n.credname);let s=await(async(e,t,n)=>{let r=[["Authorization",`Bearer ${t}`]],s=JSON.stringify({username:n});return await e.getHttpClient().post("/frontend-api/sessions/users/credentials/fido2/init",s,r)})(this._config,t,e),i=await c(s);return await(async(e,t,n,r,s,i,o)=>{let c=s.response,l=[];typeof c.getTransports<"u"&&(l=c.getTransports());let u=[["Authorization",`Bearer ${t}`]],d=JSON.stringify({session_pin:void 0,username:n,cred_name:o,attestation_response:{id:a(s.rawId),challenge:r.challenge,type:"public-key",response:{attestationObject:a(c.attestationObject),clientDataJSON:a(c.clientDataJSON),transports:l}}});return await e.getHttpClient().post("/frontend-api/sessions/users/credentials/fido2/complete",d,u)})(this._config,t,e,s,i,0,r)}},S=class{_config;constructor(e){this._config=e}async signupWithEmail(e){let t=await l(this._config,"enforce-email-verification-link");await(async(e,t,n)=>{let r=JSON.stringify({session_id:t,username:n});await e.getHttpClient().post("/frontend-api/sessions/mfa/register/email/init",r)})(this._config,t.session_id,e);let n=await k(this._config,t.session_id),r=await u(this._config,t.session_id);return{user:{user_uuid:n.user.user_uuid,username:n.user.username,created_at:n.user.created_at,last_login:n.user.last_login,is_active:n.user.is_active},auth_data:{token:r.access_token,expires_in:r.expires_in}}}async signinWithEmail(e){let t=await l(this._config,"enforce-email-verification-link");await(async(e,t,n)=>{let r=JSON.stringify({session_id:t,username:n});await e.getHttpClient().post("/frontend-api/sessions/mfa/authenticate/email/init",r)})(this._config,t.session_id,e);let n=await k(this._config,t.session_id),r=await u(this._config,t.session_id);return{user:{user_uuid:n.user.user_uuid,username:n.user.username,created_at:n.user.created_at,last_login:n.user.last_login,is_active:n.user.is_active},auth_data:{token:r.access_token,expires_in:r.expires_in}}}},C=class{_baseUrl;_appId;_httpClient;constructor(e,t){this._baseUrl=e,this._appId=t,this._httpClient=new s(this._baseUrl)}getBaseUrl(){return this._baseUrl}getAppId(){return this._appId}getHttpClient(){return this._httpClient}},O=function(){return O=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},O.apply(this,arguments)},N=function(e,t,n,r){return new(n||(n=Promise))((function(s,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function o(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}c((r=r.apply(e,t||[])).next())}))},A=function(e,t){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,o[0]&&(i=0)),i;)try{if(n=1,r&&(s=2&o[0]?r.return:o[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,o[1])).done)return s;switch(r=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){i.label=o[1];break}if(6===o[0]&&i.label<s[1]){i.label=s[1],s=o;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(o);break}s[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}};!function(){N(this,void 0,void 0,(function(){var r,s,a,i,c,l,u,p,_,k,T,U,J,I,L,H,x,D,K,P,$,W,B,j,q,R,V,z,M,F,Y=this;return A(this,(function(G){return r=new t,s=new C("",""),a=new d(s),i=new S(s),c=new E(s),l=document.getElementById("pkey"),u=Array.from(document.getElementsByTagName("input")),p=u[0],_=u[1],k=u[2],T=u[3],U=u[4],J=Array.from(document.getElementsByTagName("button")),I=J[0],L=J[1],H=J[2],x=J[3],D=J[4],K=J[5],P=J[6],$=J[7],W=J[8],B=J[9],j=J[10],q=J[11],R=J[12],V=J[13],z=J[14],M=J[15],F=function(){return{username:p.value,credentialName:_.value,credentialUUID:k.value,appId:T.value,baseURL:U.value,privateKey:l.value}},M.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,o,l;return A(this,(function(u){return t=F(),n=t.baseURL,r=t.appId,o=t.privateKey,s=new C(n,r),a=new d(s),i=new S(s),c=new E(s),l={baseUrl:n,appId:r,privateKey:o},e.storeEnvVariables(l),document.querySelector(".message"),alert("New Directweb configured!"),[2]}))}))})),window.addEventListener("load",(function(){var t=e.getEnvVariables();if(t){var n=t.baseUrl,r=t.appId,s=t.privateKey;U.value=n,T.value=r,l.value=s,M.click()}})),I.addEventListener("click",(function(){var e=s.getBaseUrl(),t=s.getAppId();if(!s.getHttpClient()||e!==F().baseURL||t!==F().appId)throw new Error("Invalid configuration");var n={baseUrl:e,appId:t};alert(JSON.stringify(n,null,2))})),L.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var e;return A(this,(function(t){switch(t.label){case 0:return[4,o()];case 1:return e=t.sent(),alert(JSON.stringify(e,null,2)),[2]}}))}))})),R.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,s,i,o,c;return A(this,(function(l){switch(l.label){case 0:t=F(),n=t.username,r=t.credentialName,s=O({},r&&{credname:r}),l.label=1;case 1:return l.trys.push([1,3,4,5]),[4,a.signupWithPasskey(n,s)];case 2:return i=l.sent(),alert(JSON.stringify(i,null,2)),o=i.auth_data,e.storeAccessToken(o.token),[3,5];case 3:return c=l.sent(),console.log(c),alert(c.message),[3,5];case 4:return p.value="",_.value="",[7];case 5:return[2]}}))}))})),q.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,s;return A(this,(function(i){switch(i.label){case 0:t=F().username,i.label=1;case 1:return i.trys.push([1,3,4,5]),[4,a.signinWithPasskey(t||null)];case 2:return n=i.sent(),alert(JSON.stringify(n,null,2)),r=n.auth_data,e.storeAccessToken(r.token),[3,5];case 3:return s=i.sent(),console.log(s),alert(s.message),[3,5];case 4:return p.value="",[7];case 5:return[2]}}))}))})),V.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,s,a,o;return A(this,(function(c){switch(c.label){case 0:t=F().username,c.label=1;case 1:return c.trys.push([1,3,4,5]),r.add(n),[4,i.signupWithEmail(t)];case 2:return s=c.sent(),alert(JSON.stringify(s,null,2)),a=s.auth_data,e.storeAccessToken(a.token),[3,5];case 3:return o=c.sent(),console.log(o),alert(o.message),[3,5];case 4:return p.value="",r.remove(n),[7];case 5:return[2]}}))}))})),z.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,s,a,o;return A(this,(function(c){switch(c.label){case 0:t=F().username,c.label=1;case 1:return c.trys.push([1,3,4,5]),r.add(n),[4,i.signinWithEmail(t)];case 2:return s=c.sent(),alert(JSON.stringify(s,null,2)),a=s.auth_data,e.storeAccessToken(a.token),[3,5];case 3:return o=c.sent(),console.log(o),alert(o.message),[3,5];case 4:return p.value="",r.remove(n),[7];case 5:return[2]}}))}))})),H.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,a,i,o,c;return A(this,(function(l){switch(l.label){case 0:return l.trys.push([0,2,,3]),t=e.getAccessToken(),[4,f(s,t)];case 1:for(n=l.sent(),alert(JSON.stringify(n,null,2)),r.clear(),a=0,i=n;a<i.length;a++)o=i[a],r.add(o.cred_uuid);return[3,3];case 2:return c=l.sent(),console.log(c),alert(c.message),[3,3];case 3:return[2]}}))}))})),x.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,a,i,o;return A(this,(function(c){switch(c.label){case 0:t=F(),n=t.credentialName,r=t.credentialUUID,c.label=1;case 1:return c.trys.push([1,3,4,5]),a=e.getAccessToken(),[4,g(s,a,r,n)];case 2:return i=c.sent(),alert(JSON.stringify(i,null,2)),[3,5];case 3:return o=c.sent(),console.log(o),alert(o.message),[3,5];case 4:return _.value="",k.value="",[7];case 5:return[2]}}))}))})),D.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,a;return A(this,(function(i){switch(i.label){case 0:t=F().credentialUUID,i.label=1;case 1:return i.trys.push([1,3,4,5]),n=e.getAccessToken(),[4,v(s,n,t)];case 2:return r=i.sent(),alert(JSON.stringify(r,null,2)),[3,5];case 3:return a=i.sent(),console.log(a),alert(a.message),[3,5];case 4:return k.value="",[7];case 5:return[2]}}))}))})),K.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,a;return A(this,(function(i){switch(i.label){case 0:t=F().credentialUUID,i.label=1;case 1:return i.trys.push([1,3,4,5]),n=e.getAccessToken(),[4,y(s,n,t)];case 2:return r=i.sent(),alert(JSON.stringify(r,null,2)),[3,5];case 3:return a=i.sent(),console.log(a),alert(a.message),[3,5];case 4:return k.value="",[7];case 5:return[2]}}))}))})),P.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,a,i;return A(this,(function(o){switch(o.label){case 0:t=F().credentialUUID,o.label=1;case 1:return o.trys.push([1,3,4,5]),n=e.getAccessToken(),[4,w(s,n,t)];case 2:return a=o.sent(),alert(JSON.stringify(a,null,2)),r.remove(t),[3,5];case 3:return i=o.sent(),console.log(i),alert(i.message),[3,5];case 4:return k.value="",[7];case 5:return[2]}}))}))})),$.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,s,a,i,o;return A(this,(function(l){switch(l.label){case 0:t=F(),n=t.username,r=t.credentialName,s=O({},r&&{credname:r}),l.label=1;case 1:return l.trys.push([1,3,4,5]),a=e.getAccessToken(),[4,c.addPasskeyWithToken(n,a,s)];case 2:return i=l.sent(),alert(JSON.stringify(i,null,2)),[3,5];case 3:return o=l.sent(),console.log(o),alert(o.message),[3,5];case 4:return p.value="",_.value="",[7];case 5:return[2]}}))}))})),W.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,a;return A(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),t=e.getAccessToken(),[4,b(s,t)];case 1:return n=i.sent(),alert(JSON.stringify(n,null,2)),r.add(n.id),[3,3];case 2:return a=i.sent(),console.log(a),alert(a.message),[3,3];case 3:return[2]}}))}))})),B.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,r,a,i,o;return A(this,(function(c){switch(c.label){case 0:t=F(),n=t.credentialName,r=t.credentialUUID,c.label=1;case 1:return c.trys.push([1,3,4,5]),a=e.getAccessToken(),[4,h(s,a,r,n)];case 2:return i=c.sent(),alert(JSON.stringify(i,null,2)),[3,5];case 3:return o=c.sent(),console.log(o),alert(o.message),[3,5];case 4:return _.value="",k.value="",[7];case 5:return[2]}}))}))})),j.addEventListener("click",(function(){return N(Y,void 0,void 0,(function(){var t,n,a,i;return A(this,(function(o){switch(o.label){case 0:t=F().credentialUUID,o.label=1;case 1:return o.trys.push([1,3,4,5]),n=e.getAccessToken(),[4,m(s,n,t)];case 2:return a=o.sent(),alert(JSON.stringify(a,null,2)),r.remove(t),[3,5];case 3:return i=o.sent(),console.log(i),alert(i.message),[3,5];case 4:return k.value="",[7];case 5:return[2]}}))}))})),[2]}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,